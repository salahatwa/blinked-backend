spring.datasource.url = jdbc:postgresql://localhost:5432/blinked2?useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2B8
spring.datasource.username = postgres
spring.datasource.password = 123456

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


spring.thymeleaf.prefix=file:/E:/Codes/Backend/Blinked-backend-templates/template_folder/


spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.javax.persistence.validation.mode=none
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
spring.h2.console.enabled=false
#spring.jpa.open-in-view=false



# swagger
springdoc.swagger-ui.path=${SWAGGER_URL:/docs}
swagger.username=${SWAGGER_USERNAME:#{null}}
swagger.password=${SWAGGER_PASSWORD:#{null}}
springdoc.default-produces-media-type=application/json
springdoc.default-consumes-media-type=application/json

# security
token.expiration-in-hours=${TOKEN_EXPIRATION_IN_HOURS:24}
token.refresh.expiration-in-days=${REFRESH_TOKEN_EXPIRATION_IN_DAYS:7}
token.secret=${TOKEN_SECRET:secret}
hashid.secret=${HASHID_SECRET:secret}
cookie.secret=${COOKIE_SECRET:secret}
server.servlet.session.cookie.name=${COOKIE_NAME:CONSESSIONARIA_SESSION_ID}
server.servlet.session.cookie.path=/app



# recovery email
recovery.minutes-to-expire=${MINUTES_TO_EXPIRE_RECOVERY_CODE:20}



# rate limit
spring.cache.jcache.config=classpath:ehcache.xml
bucket4j.enabled=true
bucket4j.filters[0].cache-name=buckets
bucket4j.filters[0].filter-method=servlet
bucket4j.filters[0].http-response-body={ "status": 249, "message": "Too many requests" }
bucket4j.filters[0].url=/api/*
bucket4j.filters[0].metrics.enabled=true
bucket4j.filters[0].metrics.tags[0].key=IP
bucket4j.filters[0].metrics.tags[0].expression=getRemoteAddr()
bucket4j.filters[0].strategy=first
bucket4j.filters[0].rate-limits[0].skip-condition=getRequestURI().contains('/swagger-ui') || getRequestURI().contains('/documentation')
bucket4j.filters[0].rate-limits[0].expression=getRemoteAddr()
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=${MAX_REQUESTS_PER_MINUTE:50}
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=minutes
bucket4j.filters[0].rate-limits[0].bandwidths[0].fixed-refill-interval=0
bucket4j.filters[0].rate-limits[0].bandwidths[0].fixed-refill-interval-unit=minutes
